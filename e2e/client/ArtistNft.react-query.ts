/**
* This file was automatically generated by @jmes-cosmwasm/ts-codegen@0.14.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @jmes-cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Coin } from "@terra-money/terra.js";
import { useMutation, UseMutationOptions } from "@tanstack/react-query";
import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForNullable_Empty, Empty, ApprovalResponse, ApprovalsResponse, ContractInfoResponse, ExecuteMsg, Binary, MintMsgForNullable_Empty, InstantiateMsg, MinterResponse, NftInfoResponse, NumTokensResponse, OperatorsResponse, QueryMsgForEmpty, TokensResponse } from "./ArtistNft.types";
import { ArtistNftClient } from "./ArtistNft.client";
export interface ArtistNftExtensionMutation {
  client: ArtistNftClient;
  msg: {
    msg: Empty;
  };
  args?: {
    coins?: Coins;
  };
}
export function useArtistNftExtensionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArtistNftExtensionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArtistNftExtensionMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.extension(msg, coins), options);
}
export interface ArtistNftBurnMutation {
  client: ArtistNftClient;
  msg: {
    tokenId: string;
  };
  args?: {
    coins?: Coins;
  };
}
export function useArtistNftBurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArtistNftBurnMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArtistNftBurnMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.burn(msg, coins), options);
}
export interface ArtistNftMintMutation {
  client: ArtistNftClient;
  msg: MintMsgForNullable_Empty;
  args?: {
    coins?: Coins;
  };
}
export function useArtistNftMintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArtistNftMintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArtistNftMintMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.mint(msg, coins), options);
}
export interface ArtistNftRevokeAllMutation {
  client: ArtistNftClient;
  msg: {
    operator: string;
  };
  args?: {
    coins?: Coins;
  };
}
export function useArtistNftRevokeAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArtistNftRevokeAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArtistNftRevokeAllMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.revokeAll(msg, coins), options);
}
export interface ArtistNftApproveAllMutation {
  client: ArtistNftClient;
  msg: {
    expires?: Expiration;
    operator: string;
  };
  args?: {
    coins?: Coins;
  };
}
export function useArtistNftApproveAllMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArtistNftApproveAllMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArtistNftApproveAllMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.approveAll(msg, coins), options);
}
export interface ArtistNftRevokeMutation {
  client: ArtistNftClient;
  msg: {
    spender: string;
    tokenId: string;
  };
  args?: {
    coins?: Coins;
  };
}
export function useArtistNftRevokeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArtistNftRevokeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArtistNftRevokeMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.revoke(msg, coins), options);
}
export interface ArtistNftApproveMutation {
  client: ArtistNftClient;
  msg: {
    expires?: Expiration;
    spender: string;
    tokenId: string;
  };
  args?: {
    coins?: Coins;
  };
}
export function useArtistNftApproveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArtistNftApproveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArtistNftApproveMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.approve(msg, coins), options);
}
export interface ArtistNftSendNftMutation {
  client: ArtistNftClient;
  msg: {
    contract: string;
    msg: Binary;
    tokenId: string;
  };
  args?: {
    coins?: Coins;
  };
}
export function useArtistNftSendNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArtistNftSendNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArtistNftSendNftMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.sendNft(msg, coins), options);
}
export interface ArtistNftTransferNftMutation {
  client: ArtistNftClient;
  msg: {
    recipient: string;
    tokenId: string;
  };
  args?: {
    coins?: Coins;
  };
}
export function useArtistNftTransferNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArtistNftTransferNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArtistNftTransferNftMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.transferNft(msg, coins), options);
}