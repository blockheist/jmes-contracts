/**
* This file was automatically generated by @jmes-cosmwasm/ts-codegen@0.14.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @jmes-cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Coin } from "@terra-money/terra.js";
import { Addr, Uint128, ConfigResponse, Empty, ExecuteMsg, Binary, Cw20ReceiveMsg, InstantiateMsg, QueryMsg } from "./ArtistCurator.types";
import { ArtistCuratorQueryClient, ArtistCuratorClient } from "./ArtistCurator.client";
export const artistCuratorQueryKeys = {
  contract: ([{
    contract: "artistCurator"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...artistCuratorQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  getConfig: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...artistCuratorQueryKeys.address(contractAddress)[0],
    method: "get_config",
    args
  }] as const)
};
export interface ArtistCuratorReactQuery<TResponse, TData = TResponse> {
  client: ArtistCuratorQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ArtistCuratorGetConfigQuery<TData> extends ArtistCuratorReactQuery<GetConfigResponse, TData> {}
export function useArtistCuratorGetConfigQuery<TData = GetConfigResponse>({
  client,
  options
}: ArtistCuratorGetConfigQuery<TData>) {
  return useQuery<GetConfigResponse, Error, TData>(artistCuratorQueryKeys.getConfig(client?.contractAddress), () => client ? client.getConfig() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArtistCuratorReceiveMutation {
  client: ArtistCuratorClient;
  msg: Cw20ReceiveMsg;
  args?: {
    coins?: Coins;
  };
}
export function useArtistCuratorReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArtistCuratorReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArtistCuratorReceiveMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.receive(msg, coins), options);
}