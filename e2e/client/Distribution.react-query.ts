/**
* This file was automatically generated by @jmes-cosmwasm/ts-codegen@0.14.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @jmes-cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Coin } from "@terra-money/terra.js";
import { Addr, ConfigResponse, ExecuteMsg, Uint128, Timestamp, Uint64, GrantResponse, InstantiateMsg, QueryMsg } from "./Distribution.types";
import { DistributionQueryClient, DistributionClient } from "./Distribution.client";
export const distributionQueryKeys = {
  contract: ([{
    contract: "distribution"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...distributionQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...distributionQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  grant: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...distributionQueryKeys.address(contractAddress)[0],
    method: "grant",
    args
  }] as const),
  grants: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...distributionQueryKeys.address(contractAddress)[0],
    method: "grants",
    args
  }] as const)
};
export interface DistributionReactQuery<TResponse, TData = TResponse> {
  client: DistributionQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DistributionGrantsQuery<TData> extends DistributionReactQuery<GrantsResponse, TData> {
  args: {
    dao?: Addr;
    limit?: number;
    startAfter?: string;
  };
}
export function useDistributionGrantsQuery<TData = GrantsResponse>({
  client,
  args,
  options
}: DistributionGrantsQuery<TData>) {
  return useQuery<GrantsResponse, Error, TData>(distributionQueryKeys.grants(client?.contractAddress, args), () => client ? client.grants({
    dao: args.dao,
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DistributionGrantQuery<TData> extends DistributionReactQuery<GrantResponse, TData> {
  args: {
    grantId: number;
  };
}
export function useDistributionGrantQuery<TData = GrantResponse>({
  client,
  args,
  options
}: DistributionGrantQuery<TData>) {
  return useQuery<GrantResponse, Error, TData>(distributionQueryKeys.grant(client?.contractAddress, args), () => client ? client.grant({
    grantId: args.grantId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DistributionConfigQuery<TData> extends DistributionReactQuery<ConfigResponse, TData> {}
export function useDistributionConfigQuery<TData = ConfigResponse>({
  client,
  options
}: DistributionConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(distributionQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DistributionClaimMutation {
  client: DistributionClient;
  msg: {
    grantId: number;
  };
  args?: {
    coins?: Coins;
  };
}
export function useDistributionClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DistributionClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DistributionClaimMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.claim(msg, coins), options);
}
export interface DistributionAddGrantMutation {
  client: DistributionClient;
  msg: {
    amount: Uint128;
    dao: Addr;
    duration: number;
  };
  args?: {
    coins?: Coins;
  };
}
export function useDistributionAddGrantMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DistributionAddGrantMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DistributionAddGrantMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.addGrant(msg, coins), options);
}