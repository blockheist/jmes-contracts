/**
* This file was automatically generated by @jmes-cosmwasm/ts-codegen@0.14.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @jmes-cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Coin } from "@terra-money/terra.js";
import { Addr, Uint128, ConfigResponse, Cw20HookMsg, Feature, ExecuteMsg, Binary, VoteOption, Cw20ReceiveMsg, InstantiateMsg, ProposalPeriod, PeriodInfoResponse, ProposalType, ProposalStatus, ProposalResponse, ProposalsResponse, QueryMsg } from "./Governance.types";
import { GovernanceQueryClient, GovernanceClient } from "./Governance.client";
export const governanceQueryKeys = {
  contract: ([{
    contract: "governance"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...governanceQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...governanceQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  periodInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...governanceQueryKeys.address(contractAddress)[0],
    method: "period_info",
    args
  }] as const),
  proposal: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...governanceQueryKeys.address(contractAddress)[0],
    method: "proposal",
    args
  }] as const),
  proposals: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...governanceQueryKeys.address(contractAddress)[0],
    method: "proposals",
    args
  }] as const)
};
export interface GovernanceReactQuery<TResponse, TData = TResponse> {
  client: GovernanceQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface GovernanceProposalsQuery<TData> extends GovernanceReactQuery<ProposalsResponse, TData> {
  args: {
    limit?: number;
    start?: number;
  };
}
export function useGovernanceProposalsQuery<TData = ProposalsResponse>({
  client,
  args,
  options
}: GovernanceProposalsQuery<TData>) {
  return useQuery<ProposalsResponse, Error, TData>(governanceQueryKeys.proposals(client?.contractAddress, args), () => client ? client.proposals({
    limit: args.limit,
    start: args.start
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface GovernanceProposalQuery<TData> extends GovernanceReactQuery<ProposalResponse, TData> {
  args: {
    id: number;
  };
}
export function useGovernanceProposalQuery<TData = ProposalResponse>({
  client,
  args,
  options
}: GovernanceProposalQuery<TData>) {
  return useQuery<ProposalResponse, Error, TData>(governanceQueryKeys.proposal(client?.contractAddress, args), () => client ? client.proposal({
    id: args.id
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface GovernancePeriodInfoQuery<TData> extends GovernanceReactQuery<PeriodInfoResponse, TData> {}
export function useGovernancePeriodInfoQuery<TData = PeriodInfoResponse>({
  client,
  options
}: GovernancePeriodInfoQuery<TData>) {
  return useQuery<PeriodInfoResponse, Error, TData>(governanceQueryKeys.periodInfo(client?.contractAddress), () => client ? client.periodInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface GovernanceConfigQuery<TData> extends GovernanceReactQuery<ConfigResponse, TData> {}
export function useGovernanceConfigQuery<TData = ConfigResponse>({
  client,
  options
}: GovernanceConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(governanceQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface GovernanceSetContractMutation {
  client: GovernanceClient;
  msg: {
    artistCurator: string;
    distribution: string;
    identityservice: string;
  };
  args?: {
    coins?: Coins;
  };
}
export function useGovernanceSetContractMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, GovernanceSetContractMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, GovernanceSetContractMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.setContract(msg, coins), options);
}
export interface GovernanceConcludeMutation {
  client: GovernanceClient;
  msg: {
    id: number;
  };
  args?: {
    coins?: Coins;
  };
}
export function useGovernanceConcludeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, GovernanceConcludeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, GovernanceConcludeMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.conclude(msg, coins), options);
}
export interface GovernanceVoteMutation {
  client: GovernanceClient;
  msg: {
    id: number;
    vote: VoteOption;
  };
  args?: {
    coins?: Coins;
  };
}
export function useGovernanceVoteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, GovernanceVoteMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, GovernanceVoteMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.vote(msg, coins), options);
}
export interface GovernanceReceiveMutation {
  client: GovernanceClient;
  msg: Cw20ReceiveMsg;
  args?: {
    coins?: Coins;
  };
}
export function useGovernanceReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, GovernanceReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, GovernanceReceiveMutation>(({
    client,
    msg,
    args: {
      coins
    } = {}
  }) => client.receive(msg, coins), options);
}