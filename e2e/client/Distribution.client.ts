/**
* This file was automatically generated by @jmes-cosmwasm/ts-codegen@0.14.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @jmes-cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { LCDClient, Coins, MnemonicKey, MsgExecuteContract, WaitTxBroadcastResult } from "@terra-money/terra.js";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Addr, ConfigResponse, ExecuteMsg, Uint128, Timestamp, Uint64, GrantResponse, GrantsResponse, Grant, InstantiateMsg, QueryMsg } from "./Distribution.types";
export interface DistributionReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  grant: ({
    grantId
  }: {
    grantId: number;
  }) => Promise<GrantResponse>;
  grants: ({
    dao,
    limit,
    startAfter
  }: {
    dao?: Addr;
    limit?: number;
    startAfter?: string;
  }) => Promise<GrantsResponse>;
}
export class DistributionQueryClient implements DistributionReadOnlyInterface {
  client: LCDClient;
  contractAddress: string;

  constructor(client: LCDClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.grant = this.grant.bind(this);
    this.grants = this.grants.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.wasm.contractQuery(this.contractAddress, {
      config: {}
    });
  };
  grant = async ({
    grantId
  }: {
    grantId: number;
  }): Promise<GrantResponse> => {
    return this.client.wasm.contractQuery(this.contractAddress, {
      grant: {
        grant_id: grantId
      }
    });
  };
  grants = async ({
    dao,
    limit,
    startAfter
  }: {
    dao?: Addr;
    limit?: number;
    startAfter?: string;
  }): Promise<GrantsResponse> => {
    return this.client.wasm.contractQuery(this.contractAddress, {
      grants: {
        dao,
        limit,
        start_after: startAfter
      }
    });
  };
}
export interface DistributionInterface extends DistributionReadOnlyInterface {
  contractAddress: string;
  addGrant: ({
    amount,
    dao,
    duration
  }: {
    amount: Uint128;
    dao: Addr;
    duration: number;
  }, coins?: Coins) => Promise<WaitTxBroadcastResult>;
  claim: ({
    grantId
  }: {
    grantId: number;
  }, coins?: Coins) => Promise<WaitTxBroadcastResult>;
}
export class DistributionClient extends DistributionQueryClient implements DistributionInterface {
  client: LCDClient;
  user: any;
  contractAddress: string;

  constructor(client: LCDClient, user: any, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.user = user;
    this.contractAddress = contractAddress;
    this.addGrant = this.addGrant.bind(this);
    this.claim = this.claim.bind(this);
  }

  addGrant = async ({
    amount,
    dao,
    duration
  }: {
    amount: Uint128;
    dao: Addr;
    duration: number;
  }, coins?: Coins): Promise<WaitTxBroadcastResult> => {
    const key = new MnemonicKey(this.user.mnemonicKeyOptions);
    const wallet = this.client.wallet(key);
    const execMsg = new MsgExecuteContract(this.user.address, this.contractAddress, {
      add_grant: {
        amount,
        dao,
        duration
      }
    }, coins);
    const txOptions = { msgs: [execMsg] };
    const tx = await wallet.createAndSignTx(txOptions);
    return await this.client.tx.broadcast(tx);
  };
  claim = async ({
    grantId
  }: {
    grantId: number;
  }, coins?: Coins): Promise<WaitTxBroadcastResult> => {
    const key = new MnemonicKey(this.user.mnemonicKeyOptions);
    const wallet = this.client.wallet(key);
    const execMsg = new MsgExecuteContract(this.user.address, this.contractAddress, {
      claim: {
        grant_id: grantId
      }
    }, coins);
    const txOptions = { msgs: [execMsg] };
    const tx = await wallet.createAndSignTx(txOptions);
    return await this.client.tx.broadcast(tx);
  };
}